/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.form;

//import controller.Controller;
import client.communication.Communication;
import com.sun.javafx.scene.control.skin.VirtualFlow;
import communication.Operations;
import communication.Request;
import communication.Response;
import domain.Author;
import domain.Authorship;
import domain.Book;
import domain.BookCopy;
import domain.BookGenre;
import domain.Librarian;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import view.components.TableModelAuthor;
import view.controller.Controller;

/**
 *
 * @author LORA
 */
public class BookForm extends javax.swing.JFrame {
    List<Author> listAuthors;
    Librarian lib;
    ViewBookForm formParent;
    /**
     * Creates new form BookForm
     */
    public BookForm(ViewBookForm vbf) {
        initComponents();
        setLocationRelativeTo(null);
        formParent=vbf;
        try {
            prepareView();
        } catch (Exception ex) {
            Logger.getLogger(BookForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        setLibrarian();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblLibrarian = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtBookID = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtPublicationDate = new javax.swing.JTextField();
        cmbGenre = new javax.swing.JComboBox();
        btnSaveBook = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnAddAuthor = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableAuthor = new javax.swing.JTable();
        txtSerialNumber = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Knjiga"));

        lblLibrarian.setText("Ulogovan bibliotekar:");

        jLabel2.setText("Knjiga ID:");

        jLabel3.setText("Naziv:");

        jLabel4.setText("Žanr:");

        jLabel5.setText("Godina publikacije:");

        txtBookID.setEditable(false);

        cmbGenre.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnSaveBook.setText("Sačuvaj");
        btnSaveBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveBookActionPerformed(evt);
            }
        });

        btnCancel.setText("Odustani");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnAddAuthor.setText("Dodaj autora");
        btnAddAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAuthorActionPerformed(evt);
            }
        });

        tableAuthor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableAuthor);

        jLabel6.setText("Serijski broj autorstva:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblLibrarian)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6))
                            .addComponent(jLabel5))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddAuthor)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtBookID, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtName, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtPublicationDate, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cmbGenre, javax.swing.GroupLayout.Alignment.LEADING, 0, 257, Short.MAX_VALUE)
                                .addComponent(txtSerialNumber, javax.swing.GroupLayout.Alignment.LEADING))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(btnSaveBook, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(lblLibrarian)
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtBookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cmbGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtPublicationDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(btnAddAuthor)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveBook)
                    .addComponent(btnCancel))
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveBookActionPerformed
        try {
            validateForm();
            String name=txtName.getText().trim();
            String year=txtPublicationDate.getText().trim();
            long id=Long.parseLong(txtBookID.getText());
            BookGenre bg=(BookGenre) cmbGenre.getSelectedItem();
            Book book=new Book(id, name, Controller.getInstance().getCurrentLibrarian(), bg, null, null);
            TableModelAuthor tma=(TableModelAuthor) tableAuthor.getModel();
            List<Author> authors=tma.getAuthors();
                    
            if(authors.size()<1){
                JOptionPane.showMessageDialog(this, "Niste izabrali autora");
                return; 
            }
            
            int serialNum=Integer.parseInt(txtSerialNumber.getText());
            List<Authorship> authList=Controller.getInstance().getAllAuthorships();
            for (Authorship auth : authList) {
                 if(serialNum==auth.getSerialNumber()){
                     JOptionPane.showMessageDialog(this, "Serijski broj nije jedinstven");
                     return;
                 }
             }
            
            if(!bookExist(book)){
            Controller.getInstance().addBook(book);
           /* if(book!=null){
                  ViewBookForm vbf=(ViewBookForm) this.getParent();
                  vbf.insertIntoTable(book);
            }*/
              long idB=0;
                List<Book> books=Controller.getInstance().getAllBooks();
                for (Book b : books) {
                    if(b.getName().equals(book.getName())){
                     idB=b.getBookID();
                    }
                }
                book.setBookID(idB);
                BookCopy bc=new BookCopy(1L, Integer.parseInt(year),true, book);
                Controller.getInstance().addBookCopy(bc);

            }else{
                long idB=0;
                List<Book> books=Controller.getInstance().getAllBooks();
                for (Book b : books) {
                    if(b.getName().equals(book.getName())){
                     idB=b.getBookID();
                    }
                }
                book.setBookID(idB);
                BookCopy bc=new BookCopy(1L, Integer.parseInt(year),true, book);
                Controller.getInstance().addBookCopy(bc);
                JOptionPane.showMessageDialog(this, "Kopija je uspesno sacuvana");
                

            }
          
            
            for (Author author : authors) {
                int serialNumber=Integer.parseInt(txtSerialNumber.getText().trim());
                Authorship a=new Authorship(book, author, serialNumber);
                Controller.getInstance().addAuthorship(a);
            }
            
            
          
            
            JOptionPane.showMessageDialog(this, "Sistem je zapamtio knjigu");


           refreshForm();
           formParent.fillTableBooks();
         
                 
            
        } catch (Exception ex) {

            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnSaveBookActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnAddAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAuthorActionPerformed
       TableModelAuthor tma=(TableModelAuthor) tableAuthor.getModel();
        AuthorForm af=new AuthorForm(tma);
        af.setVisible(true);
        
    }//GEN-LAST:event_btnAddAuthorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookForm().setVisible(true);
            }
        });*/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddAuthor;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSaveBook;
    private javax.swing.JComboBox cmbGenre;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblLibrarian;
    private javax.swing.JTable tableAuthor;
    private javax.swing.JTextField txtBookID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPublicationDate;
    private javax.swing.JTextField txtSerialNumber;
    // End of variables declaration//GEN-END:variables

    private void prepareView() throws SQLException, Exception {
        fillCmbGenre();
        long id=setId();
        txtBookID.setText(String.valueOf(id));
        TableModelAuthor tma=new TableModelAuthor();
        tableAuthor.setModel(tma);

    }

    private void fillCmbGenre() throws SQLException, Exception {
        List<BookGenre> list=Controller.getInstance().getAllGenres();
        cmbGenre.removeAllItems();
        for (BookGenre bookGenre : list) {
            cmbGenre.addItem(bookGenre);
        }
    }

    private void validateForm() throws Exception {
        String errorMessage="";
        if(txtName.getText().isEmpty()){
            errorMessage+="Polje naziv ne sme biti prazno!\n";
        }
         if(txtPublicationDate.getText().isEmpty()){
            errorMessage+="Polje datum ne sme biti prazno!\n";
         }
         if(txtBookID.getText().isEmpty()){
            errorMessage+="Polje KnjigaID ne sme biti prazno!\n";
        }
         if(txtSerialNumber.getText().isEmpty()){
            errorMessage+="Polje Serijski broj autorstva ne sme biti prazno!\n";
 
         }
         if(errorMessage.isEmpty()==false){
          JOptionPane.showMessageDialog(this, "ERROR:"+errorMessage, "GRESKA", JOptionPane.ERROR_MESSAGE);        
          throw new Exception(errorMessage);
         }
         
    
          
         
    
    }
   private void setLibrarian() {
        Librarian lib=Controller.getInstance().getCurrentLibrarian();
        lblLibrarian.setText("Ulogovani bibliotekar: "+lib.getFirstName()+" "+lib.getLastName());
    }

    

    private boolean bookExist(Book book)throws Exception{
        boolean exist=false;
        List<Book> list=Controller.getInstance().getAllBooks();
        for (Book book1 : list) {
            if(book.getName().equals(book1.getName())){
                exist=true;
                return exist;
            }
            
        }
        return exist;    
    }

    void loadData(Book book) {
        txtBookID.setText(String.valueOf(book.getBookID()));
        txtName.setText(book.getName());
        cmbGenre.setSelectedItem(book.getBookGenre());
        txtBookID.setEditable(false);
        txtName.setEditable(false);
        txtPublicationDate.setEditable(false);
        cmbGenre.setEditable(false);
    }

    public void setListAuthors(List<Author> listAuthors) {
        this.listAuthors = listAuthors;
    }

    public List<Author> getListAuthors() {
        return listAuthors;
    }

    
    public void addAuthor(Author a){
        TableModelAuthor mta=(TableModelAuthor) tableAuthor.getModel();
        mta.addAuthor(a);
        
    }

    private void refreshForm() {
        try {
            txtName.setText("");
            txtPublicationDate.setText("");
            txtSerialNumber.setText("");
            long id=setId();
            txtBookID.setText(String.valueOf(id));
            TableModelAuthor tma=(TableModelAuthor) tableAuthor.getModel();
            tma.refreshTable();
        } catch (Exception ex) {
            Logger.getLogger(BookForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private long setId() {
        long id=0;
        try {
            List<Book> list=Controller.getInstance().getAllBooks();
            
            for (int i = 0; i < list.size(); i++) {
                Book b = list.get(i);
                if(id<b.getBookID()){
                    id=b.getBookID();
                }
            }
            id=id+1;

            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return id;

    }
    
    
}
