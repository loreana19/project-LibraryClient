/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.form;

import domain.BookCopy;
import domain.LoanNote;
import domain.LoanNoteItem;
import domain.Member;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import view.components.TableModelLNItems;
import view.controller.Controller;

/**
 *
 * @author LORA
 */
public class LoanNoteForm extends javax.swing.JFrame {
    ViewLoanNoteForm parentForm;
    
    /**
     * Creates new form LoanNoteForm
     */
    public LoanNoteForm(ViewLoanNoteForm parentForm) {
        initComponents();
        setLocationRelativeTo(null);
        this.parentForm=parentForm;
        prepareForm();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblLib = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtLoanNoteID = new javax.swing.JTextField();
        txtDate = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtLoanNoteItemID = new javax.swing.JTextField();
        txtDateFrom = new javax.swing.JTextField();
        txtDateTo = new javax.swing.JTextField();
        cmbBookCopy = new javax.swing.JComboBox();
        btnAddLNItem = new javax.swing.JButton();
        btnSaveChanges = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableLoanNoteItem = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        cmbMember = new javax.swing.JComboBox();
        btnUpdateLN = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblLib.setText("Uogovani bibliotekar:");

        jLabel2.setText("ÄŒlan biblioteke:");

        jLabel5.setText("Pozajmica ID:");

        jLabel6.setText("Datum:");

        txtLoanNoteID.setEditable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Stavka pozajmice"));

        jLabel7.setText("RB:");

        jLabel8.setText("Primerak knjige:");

        jLabel9.setText("Datum od:");

        jLabel10.setText("Datum do:");

        txtLoanNoteItemID.setEditable(false);

        cmbBookCopy.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnAddLNItem.setText("Dodaj stavku");
        btnAddLNItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddLNItemActionPerformed(evt);
            }
        });

        btnSaveChanges.setText("Sacuvaj izmenu");
        btnSaveChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveChangesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel10))
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtDateFrom, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDateTo, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbBookCopy, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtLoanNoteItemID, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnAddLNItem)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnSaveChanges)))))))
                .addGap(18, 18, 18))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtLoanNoteItemID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(cmbBookCopy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtDateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtDateTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddLNItem)
                    .addComponent(btnSaveChanges))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        tableLoanNoteItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableLoanNoteItem);

        btnUpdate.setText("Izmeni stavku");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Obrisi stavku");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setText("Sacuvaj pozajmicu");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        cmbMember.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnUpdateLN.setText("Izmeni pozajmicu");
        btnUpdateLN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateLNActionPerformed(evt);
            }
        });

        btnCancel.setText("Odustani");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(23, 23, 23)
                                .addComponent(cmbMember, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(lblLib)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtLoanNoteID, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(150, 150, 150)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                            .addComponent(btnUpdateLN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(lblLib)
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtLoanNoteID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(btnSave))
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdateLN))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cmbMember, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdate)
                            .addComponent(btnDelete)
                            .addComponent(btnCancel))
                        .addContainerGap(33, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddLNItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddLNItemActionPerformed
            SimpleDateFormat sdf=new SimpleDateFormat("dd.MM.yyyy");
        try {
            validateLoanNoteItems();
            Date dateFrom=sdf.parse(txtDateFrom.getText());
            Date dateTo=sdf.parse(txtDateTo.getText());
            Date date=sdf.parse(txtDate.getText());
            BookCopy bc=(BookCopy) cmbBookCopy.getSelectedItem();
            long id=Long.parseLong(txtLoanNoteItemID.getText());
            
            if(dateFrom.before(date)){
               JOptionPane.showMessageDialog(this, "Datum od ne moze biti pre datuma kreiranja pozajmice");
               return;  
            }
            
            if(dateTo.before(dateFrom)){
                JOptionPane.showMessageDialog(this, "Datum do ne moze biti pre datuma od");
                return;
            }
            if(!bc.isAvailable()){
                 JOptionPane.showMessageDialog(this, "Knjiga "+bc.getBook()+" trenutno nije dostupna","GRESKA",JOptionPane.ERROR_MESSAGE);
                return;
            }
            TableModelLNItems tmlni=(TableModelLNItems) tableLoanNoteItem.getModel();
            tmlni.addLNItem(0l, bc, dateFrom, dateTo);
            
            txtLoanNoteItemID.setText(String.valueOf(id+1));
            
        } catch (ParseException ex) {
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnAddLNItemActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
      
        try {
            validateForm();
            
            TableModelLNItems tm=(TableModelLNItems) tableLoanNoteItem.getModel();
            List<LoanNoteItem> list=tm.getLoanNoteItems();
            List<BookCopy> bcList=Controller.getInstance().getAllBookCopies();
            for (int i = 0; i < bcList.size(); i++) {
                BookCopy bci = bcList.get(i);
                for (int j = 0; j < list.size(); j++) {
                    BookCopy bcj = list.get(j).getBookCopy();
                    if(bci.getBookCopyID().equals(bcj.getBookCopyID())){
                        bcj.setAvailable(false);
                        Controller.getInstance().editBC(bcj);
                    }
                    
                }
                
            }
            SimpleDateFormat sdf=new SimpleDateFormat("dd.MM.yyyy");
            Date date=sdf.parse(txtDate.getText().trim());
            Date dateFrom=sdf.parse(txtDateFrom.getText().trim());
            if(date.after(dateFrom)){
                JOptionPane.showMessageDialog(this, "Datum ne moze biti nakon datuma od", "ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }
            TableModelLNItems tmlni=(TableModelLNItems) tableLoanNoteItem.getModel();
            List<LoanNoteItem> lnItems=tmlni.getLoanNoteItems();
            if(lnItems.size()<1){
                JOptionPane.showMessageDialog(this, "Morate uneti bar jednu stavku ");
                return;
            }
            Member member=(Member) cmbMember.getSelectedItem();
            long id=Long.parseLong(txtLoanNoteID.getText());
            LoanNote ln=new LoanNote(0l, date, Controller.getInstance().getCurrentLibrarian(), member, list);
            Controller.getInstance().addLoanNote(ln);
            JOptionPane.showMessageDialog(this, "Sistem je zapamtio pozajmicu");

            refresh();
            parentForm.fillTable();
        } catch (ParseException ex) {
            ex.printStackTrace();
        } catch (Exception ex) {
             JOptionPane.showMessageDialog(this, "Sistem ne moÅ¾e da zapamti pozajmicu", "ERROR",JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int row=tableLoanNoteItem.getSelectedRow();
        if(row!=-1){
            TableModelLNItems tm=(TableModelLNItems) tableLoanNoteItem.getModel();
            tm.removeLNItem(row);
            JOptionPane.showMessageDialog(this, "Stavka uspesno obrisana");

        }else{
         JOptionPane.showMessageDialog(this, "Izaberite red za brisanje iz tabele");
         return;
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int row=tableLoanNoteItem.getSelectedRow();
        if(row!=-1){
            try {
                TableModelLNItems tm=(TableModelLNItems) tableLoanNoteItem.getModel();
                LoanNoteItem lni=tm.getLoanNoteItems(row);
               // tm.removeLNItem(row);
                SimpleDateFormat sdf=new SimpleDateFormat("dd.MM.yyyy");
                String dateTo=sdf.format(lni.getDateTo());
                String dateFrom=sdf.format(lni.getDateFrom());
                BookCopy bc=lni.getBookCopy();
                bc.setAvailable(true);
                Controller.getInstance().editBC(bc);
                fillComboBookCopy();
                txtLoanNoteItemID.setText(String.valueOf(lni.getLoanNoteItemID()));
                txtDateFrom.setText(dateFrom);
                txtDateTo.setText(dateTo);
                cmbBookCopy.setSelectedItem(lni.getBookCopy());
            } catch (Exception ex) {
                Logger.getLogger(LoanNoteForm.class.getName()).log(Level.SEVERE, null, ex);
            }

        }else{
         JOptionPane.showMessageDialog(this, "Izaberite red za brisanje iz tabele");
         return;
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnUpdateLNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateLNActionPerformed
        try {
            SimpleDateFormat sdf=new SimpleDateFormat("dd.MM.yyyy");
            long lnID=Long.parseLong(txtLoanNoteID.getText());
            Member m=(Member) cmbMember.getSelectedItem();
            Date date=sdf.parse(txtDate.getText());
            TableModelLNItems tm=(TableModelLNItems) tableLoanNoteItem.getModel();
            List<LoanNoteItem> list=tm.getLoanNoteItems();
            LoanNote ln=new LoanNote(lnID, date, Controller.getInstance().getCurrentLibrarian(), m, list);
            Controller.getInstance().updateLoanNote(ln);
            JOptionPane.showMessageDialog(this, "Uspesno izmenjena pozajmica sa ID:"+lnID);
            parentForm.fillTable();
        } catch (ParseException ex) {
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnUpdateLNActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveChangesActionPerformed
        try {
            validateLoanNoteItems();
            SimpleDateFormat sdf=new SimpleDateFormat("dd.MM.yyyy");
            Date dateFrom=sdf.parse(txtDateFrom.getText());
            Date dateTo=sdf.parse(txtDateTo.getText());
            Date date=sdf.parse(txtDate.getText());

            if(dateFrom.before(date)){
                JOptionPane.showMessageDialog(this, "Datum od ne moze biti pre datuma kreiranja pozajmice");
                return; 
            }
             if(dateTo.before(dateFrom)){
                JOptionPane.showMessageDialog(this, "Datum do ne moze biti pre datuma od");
                return;
            }
            BookCopy bc=(BookCopy) cmbBookCopy.getSelectedItem();
            LoanNoteItem lni=new LoanNoteItem(Long.parseLong(txtLoanNoteItemID.getText()),Long.parseLong(txtLoanNoteItemID.getText()) , dateFrom, dateTo, bc);
            TableModelLNItems tmlni=(TableModelLNItems) tableLoanNoteItem.getModel();
            tmlni.editLNI(lni);
            JOptionPane.showMessageDialog(this, "Uspesna izmena");
            
            txtDateFrom.setText("");
            txtDateTo.setText("");
            txtLoanNoteItemID.setText("0");
        } catch (ParseException ex) {
            ex.printStackTrace();
        }


    }//GEN-LAST:event_btnSaveChangesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoanNoteForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoanNoteForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoanNoteForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoanNoteForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoanNoteForm().setVisible(true);
            }
        });*/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddLNItem;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSaveChanges;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnUpdateLN;
    private javax.swing.JComboBox cmbBookCopy;
    private javax.swing.JComboBox cmbMember;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblLib;
    private javax.swing.JTable tableLoanNoteItem;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtDateFrom;
    private javax.swing.JTextField txtDateTo;
    private javax.swing.JTextField txtLoanNoteID;
    private javax.swing.JTextField txtLoanNoteItemID;
    // End of variables declaration//GEN-END:variables

    private void prepareForm() {
        tableLoanNoteItem.setModel(new TableModelLNItems());
        
        try {
            long idLN=setLNId();
            
            fillComboBookCopy();
            fillComboMembers();
            lblLib.setText("Ulogovani bibliotekar:   "+Controller.getInstance().getCurrentLibrarian());
            long LoanNoteItemID=0l;
            txtLoanNoteID.setText(String.valueOf(idLN));
            txtLoanNoteItemID.setText(String.valueOf(LoanNoteItemID));
            
            btnUpdateLN.setEnabled(false);
            
        } catch (Exception ex) {
            Logger.getLogger(LoanNoteForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void fillComboBookCopy() throws Exception {
        List<BookCopy> bookCopies=Controller.getInstance().getAllBookCopies();
        cmbBookCopy.removeAllItems();
        for (BookCopy bookCopy : bookCopies) {
            cmbBookCopy.addItem(bookCopy);
        }
    }

    private void fillComboMembers() throws Exception {
        List<Member> members=Controller.getInstance().getAllMembers();
        cmbMember.removeAllItems();
        for (Member m : members) {
            cmbMember.addItem(m);
        } 
    }

    private void validateLoanNoteItems() {
        if(txtDateFrom.getText().isEmpty() || txtDateTo.getText().isEmpty() ){
         JOptionPane.showMessageDialog(this, "Sva polja su obavezna", "GRESKA", JOptionPane.ERROR_MESSAGE);
         return;
        }
    }

    private void validateForm() {
      
            if(txtDateFrom.getText().isEmpty() || txtDateTo.getText().isEmpty() || txtDate.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Sva polja su obavezna", "GRESKA", JOptionPane.ERROR_MESSAGE);
                return;
            }
           
       
        
         
    }


    void loadData(LoanNote ln) {
        SimpleDateFormat sdf=new SimpleDateFormat("dd.MM.yyyy");
        txtDate.setText(sdf.format(ln.getDate()));
       
        tableLoanNoteItem.setModel(new TableModelLNItems(ln.getListOfLoanNoteItems()));
        
        txtLoanNoteID.setText(String.valueOf(ln.getLoanNote()));
        cmbMember.setSelectedItem(ln.getMember());
        txtLoanNoteItemID.setText(String.valueOf(1));
        
        btnSave.setEnabled(false);
        btnDelete.setEnabled(true);
        btnUpdateLN.setEnabled(true);
        
    }

    private void refresh() {
        try {
            TableModelLNItems tm=(TableModelLNItems) tableLoanNoteItem.getModel();
            txtDate.setText("");
            txtDateFrom.setText("");
            txtDateTo.setText("");
            long lnID=setLNId();
            long itemsID=1;
            txtLoanNoteID.setText(String.valueOf(lnID));
            txtLoanNoteItemID.setText(String.valueOf(itemsID));
            tm.refreshTable();
            
        } catch (Exception ex) {
            Logger.getLogger(LoanNoteForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private long setLNId() {
        long id=0l;
        try {
          List<LoanNote> list=Controller.getInstance().getAllLN();
            
            for (int i = 0; i < list.size(); i++) {
                LoanNote ln = list.get(i);
                if(id<ln.getLoanNote()){
                    id=ln.getLoanNote();
                }
            }
            id=id+1;
        } catch (Exception ex) {
            Logger.getLogger(LoanNoteForm.class.getName()).log(Level.SEVERE, null, ex);
        }
           
        return id;   
    }

    
}
